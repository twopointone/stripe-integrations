{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Stripe Integrations Version: 0.0.1 stripe-integrations is an open source Python package that simplifies the integration of Stripe payments into your Django web application. Its key features include: Full support for Stripe's B2C Subscription. Management commands that help synchronize customer data, cards, subscriptions, coupons, prices, and products from Stripe. Built-in webhook handling for secure communication with Stripe. A wide range of functions for creating and managing customers, subscriptions, and other Stripe-related operations within your Django web application. Installation You can easily install or upgrade to the latest version of the package using pip: pip install stripe-integrations Configuration In your settings, update STRIPE_CONFIG : STRIPE_CONFIG = { \"API_VERSION\" : \"2022-11-15\" , # Stripe API Version \"API_KEY\" : \"api_key\" , # Stripe Secret Key \"CUSTOMER_MODEL\" : \"project_name.app.models.Customer\" , # Path to import Stripe Customer model \"CARD_MODEL\" : \"project_name.app.models.Card\" , # Path to import Stripe Card model \"PRODUCT_MODEL\" : \"project_name.app.models.Product\" , # Path to import Stripe Product model \"PRICE_MODEL\" : \"project_name.app.models.Price\" , # Path to import Stripe Price model \"COUPON_MODEL\" : \"project_name.app.models.Coupon\" , # Path to import Stripe Coupon model \"EVENT_MODEL\" : \"project_name.app.models.Event\" , # Path to import Stripe Event model \"SUBSCRIPTION_MODEL\" : \"project_name.app.models.Subscription\" , # Path to import Stripe Subscription model \"CUSTOMER_FIELD_NAME\" : \"customer\" , # Field name used to have foreign key relation with `Customer` model \"USER_FIELD_NAME\" : \"user\" , # Field name that is used by `Customer` model to have foreign relation to `User` model } References Stripe API Doc: https://stripe.com/docs/api","title":"Overview"},{"location":"#stripe-integrations","text":"Version: 0.0.1 stripe-integrations is an open source Python package that simplifies the integration of Stripe payments into your Django web application. Its key features include: Full support for Stripe's B2C Subscription. Management commands that help synchronize customer data, cards, subscriptions, coupons, prices, and products from Stripe. Built-in webhook handling for secure communication with Stripe. A wide range of functions for creating and managing customers, subscriptions, and other Stripe-related operations within your Django web application.","title":"Stripe Integrations"},{"location":"#installation","text":"You can easily install or upgrade to the latest version of the package using pip: pip install stripe-integrations","title":"Installation"},{"location":"#configuration","text":"In your settings, update STRIPE_CONFIG : STRIPE_CONFIG = { \"API_VERSION\" : \"2022-11-15\" , # Stripe API Version \"API_KEY\" : \"api_key\" , # Stripe Secret Key \"CUSTOMER_MODEL\" : \"project_name.app.models.Customer\" , # Path to import Stripe Customer model \"CARD_MODEL\" : \"project_name.app.models.Card\" , # Path to import Stripe Card model \"PRODUCT_MODEL\" : \"project_name.app.models.Product\" , # Path to import Stripe Product model \"PRICE_MODEL\" : \"project_name.app.models.Price\" , # Path to import Stripe Price model \"COUPON_MODEL\" : \"project_name.app.models.Coupon\" , # Path to import Stripe Coupon model \"EVENT_MODEL\" : \"project_name.app.models.Event\" , # Path to import Stripe Event model \"SUBSCRIPTION_MODEL\" : \"project_name.app.models.Subscription\" , # Path to import Stripe Subscription model \"CUSTOMER_FIELD_NAME\" : \"customer\" , # Field name used to have foreign key relation with `Customer` model \"USER_FIELD_NAME\" : \"user\" , # Field name that is used by `Customer` model to have foreign relation to `User` model }","title":"Configuration"},{"location":"#references","text":"Stripe API Doc: https://stripe.com/docs/api","title":"References"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.0.1] - 2023-05-01 Added Initial Release","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#001-2023-05-01","text":"","title":"[0.0.1] - 2023-05-01"},{"location":"changelog/#added","text":"Initial Release","title":"Added"},{"location":"library/management_commands/","text":"Management commands Built-in management commands that can be used for various use cases. The following are the available commands: Sync customer details Use this command to synchronize customers -related details ( default source/card and subscriptions ) from Stripe to the local database. Note that it only updates existing customers; it doesn't create new ones. python manage.py sync_stripe_customers Sync products Use this command to sync products from Stripe to the local database. It updates existing products and creates new ones. python manage.py sync_stripe_products Sync prices Use this command to sync prices from Stripe to the local database. It updates existing prices and creates new ones. python manage.py sync_stripe_prices Sync coupons Use this command to sync coupons from Stripe to the local database. It updates existing coupons and creates new ones. python manage.py sync_stripe_coupons","title":"Management Commands"},{"location":"library/management_commands/#management-commands","text":"Built-in management commands that can be used for various use cases. The following are the available commands:","title":"Management commands"},{"location":"library/management_commands/#sync-customer-details","text":"Use this command to synchronize customers -related details ( default source/card and subscriptions ) from Stripe to the local database. Note that it only updates existing customers; it doesn't create new ones. python manage.py sync_stripe_customers","title":"Sync customer details"},{"location":"library/management_commands/#sync-products","text":"Use this command to sync products from Stripe to the local database. It updates existing products and creates new ones. python manage.py sync_stripe_products","title":"Sync products"},{"location":"library/management_commands/#sync-prices","text":"Use this command to sync prices from Stripe to the local database. It updates existing prices and creates new ones. python manage.py sync_stripe_prices","title":"Sync prices"},{"location":"library/management_commands/#sync-coupons","text":"Use this command to sync coupons from Stripe to the local database. It updates existing coupons and creates new ones. python manage.py sync_stripe_coupons","title":"Sync coupons"},{"location":"library/models/","text":"Models A set of base abstract models is included in the library, which encompasses all standard Stripe object fields. This means that developers can inherit these models to incorporate Stripe functionality into their Django projects and add any necessary custom fields. Customer A customer represents an individual or entity that engages with your business. To create a customer model that incorporates all the fields found in a Stripe customer object, developers can inherit from StripeBaseCustomer provided by the library. Example from django.db import models from stripe_integrations.models import StripeBaseCustomer from users.models import User class Customer ( StripeBaseCustomer ): user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = \"stripe_customers\" , ) Fields The StripeBaseCustomer abstract model provides the following fields: Parameter Description id (string) The primary key id (uuid) of the customer in the local database. created_at (datetime) Timestamp when the customer object was created in the local database. updated_at (datetime) Timestamp when the customer object was last updated in the local database. stripe_id (string) Customer's stripe id name (string) The customer\u2019s full name or business name. description (string) An arbitrary string attached to the object. Often useful for displaying to users. email (string) The customer\u2019s email address. address (string) The customer\u2019s address. balance (integer) An integer amount in cents that represents the customer\u2019s current balance, which affect the customer\u2019s future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. currency (string) Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes. Choices: \"usd\" delinquent (boolean) When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice isn\u2019t paid by its due date. default_source (string) ID of the default payment source for the customer. shipping (json) Mailing and shipping address for the customer. Appears on invoices emailed to this customer. tax_exempt (string) Describes the customer\u2019s tax exemption status. One of none , exempt , or reverse . When set to reverse, invoice and receipt PDFs include the text \"Reverse charge\". preferred_locales (array containing string) The customer\u2019s preferred locales (languages), ordered by preference. invoice_prefix (string) The prefix for the customer used to generate unique invoice numbers. Must be 3\u201312 uppercase letters or numbers. invoice_settings (json) Default invoice settings for this customer. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. date_purged (datetime) Deleted at datetime by which we can determine when the customer was deleted. When a customer is deleted on stripe this field will be updated. is_active (boolean) Determine customer is active or not metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. Configuration Once the Customer model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"CUSTOMER_MODEL\" : \"app.models.Customer\" , \"USER_FIELD_NAME\" : \"user\" , } Card In the context of payment processing, a card refers to the payment method that a customer will use to make a payment. To define a card model that includes all the fields found in a Stripe card object, developers can inherit from StripeBaseCard provided by the library. Example from django.db import models from stripe_integrations.models import StripeBaseCard class Card ( StripeBaseCard ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"cards\" , ) Fields The StripeBaseCard abstract model provides the following fields: Parameter Description id (string) The primary key id (uuid) of the card in the local database. created_at (datetime) Timestamp when the card object was created in the local database. updated_at (datetime) Timestamp when the card object was last updated in the local database. stripe_id (string) Customer's stripe id name (string) Cardholder name. address_line_1 (string) Address line 1 (Street address/PO Box/Company name). address_line_1_check (string) If address_line1 was provided, results of the check: pass, fail, unavailable, or unchecked. address_line_2 (string) Address line 2 (Apartment/Suite/Unit/Building). address_city (string) City/District/Suburb/Town/Village. address_state (string) State/County/Province/Region. address_country (string) Billing address country, if provided when creating card. address_zip (string) ZIP or postal code. address_zip_check (string) If address_zip was provided, results of the check: pass , fail , unavailable , or unchecked . brand (string) Card brand. Can be American Express , Diners Club , Discover, JCB , MasterCard , UnionPay , Visa , or Unknown . country (string) Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected. cvc_check (string) If a CVC was provided, results of the check: pass , fail , unavailable , or unchecked . A result of unchecked indicates that CVC was provided but hasn\u2019t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. dynamic_last4 (string) (For tokenized numbers only.) The last four digits of the device account number. tokenization_method (string) If the card number is tokenized, this is the method that was used. Can be android_pay (includes Google Pay), apple_pay , masterpass , visa_checkout , or null. exp_month (integer) Two-digit number representing the card\u2019s expiration month. exp_year (integer) Four-digit number representing the card\u2019s expiration year. funding (string) Card funding type. Can be credit , debit , prepaid , or unknown . last4 (string) The last four digits of the card. fingerprint (string) Uniquely identifies this particular card number. You can use this attribute to check whether two customers who\u2019ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. Configuration Once the Card model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"CARD_MODEL\" : \"app.models.Card\" , \"CUSTOMER_FIELD_NAME\" : \"customer\" , } Subscription Subscriptions enable businesses to charge customers on a recurring basis. To define a subscription model that incorporates all the fields found in a Stripe subscription object, developers can inherit from StripeBaseSubscription provided by the library. Example from django.db import models from stripe_integrations.models import StripeBaseSubscription class Subscription ( StripeBaseSubscription ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"subscriptions\" , help_text = \"The customer associated with this subscription\" , ) Fields The StripeBaseSubscription abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the subscription in the local database. created_at (datetime) Timestamp when the subscription object was created in the local database. updated_at (datetime) Timestamp when the subscription object was last updated in the local database. stripe_id (string) Customer's stripe id items (json) List of subscription items, each with an attached price. application_fee_percent (decimal) A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\u2019s Stripe account. automatic_tax (json) Automatic tax settings for this subscription. billing_cycle_anchor (datetime) Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices. The timestamp is in UTC format. billing_thresholds (json) Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period cancel_at (datetime) A date in the future at which the subscription will automatically get canceled cancel_at_period_end (boolean) If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. canceled_at (datetime) If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end , canceled_at will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state. cancellation_details (json) Details about why this subscription was cancelled collection_method (string) Either charge_automatically, or send_invoice. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as active. current_period_end (datetime) End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. current_period_start (datetime) Start of the current period that the subscription has been invoiced for. days_until_due (integer) Details about why this subscription was cancelled default_payment_method (string) ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over default_source. default_source (string) ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If default_payment_method is also set, default_payment_method will take precedence. default_tax_rates (json) The tax rates that will apply to any subscription item that does not have tax_rates set. Invoices created will have their default_tax_rates populated from the subscription. discount (json) Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. ended_at (datetime) If the subscription has ended, the date the subscription ended. next_pending_invoice_item_invoice (datetime) Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at pending_invoice_item_interval . pause_collection (json) If specified, payment collection for this subscription will be paused. pending_invoice_item_interval (json) Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling Create an invoice for the given subscription at the specified interval. pending_setup_intent (string) You can use this SetupIntent to collect user authentication when creating a subscription without immediate payment or updating a subscription\u2019s payment method, allowing you to optimize for off-session payments. Learn more in the SCA Migration Guide. pending_update (json) If specified, pending updates that will be applied to the subscription once the latest_invoice has been paid. quantity (integer) The quantity applied to this subscription. This value will be null for multi-plan subscriptions start_date (datetime) Date when the subscription was first created. The date might differ from the created date due to backdating. status (string) The status of this subscription. Possible values are incomplete , incomplete_expired , trialing , active , past_due , canceled , or unpaid . trial_end (datetime) If the subscription has a trial, the end of that trial. trial_start (datetime) If the subscription has a trial, the beginning of that trial. trial_settings (json) Settings related to subscription trials. latest_invoice (string) The most recent invoice this subscription has generated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. Configuration Once the Card model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"SUBSCRIPTION_MODEL\" : \"app.models.Subscription\" , \"CUSTOMER_FIELD_NAME\" : \"customer\" , } Product In the context of payment processing, a product refers to a specific good or service offered to customers. For instance, a business might offer both a standard and premium version of a product, with each version being a distinct product. Products can be used with Prices to configure pricing in Payment Links, Checkout, and Subscriptions. To define a product model that incorporates all the fields found in a Stripe product object, developers can inherit from StripeBaseProduct provided by the library. Example from stripe_integrations.models import StripeBaseProduct class Product ( StripeBaseProduct ): pass Fields The StripeBaseProduct abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the product in the local database. created_at (datetime) Timestamp when the product object was created in the local database. updated_at (datetime) Timestamp when the product object was last updated in the local database. stripe_id (string) Stripe object id active (boolean) Whether the product is currently available for purchase. description (string) The product\u2019s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. name (string) The product\u2019s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. statement_descriptor (string) Extra information about a product which will appear on your customer\u2019s credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. tax_code (string) A tax code ID. unit_label (string) A label that represents units of this product. When set, this will be included in customers\u2019 receipts, invoices, Checkout, and the customer portal. images (array containing strings) A list of up to 8 URLs of images for this product, meant to be displayable to the customer. shippable (boolean) Whether this product is shipped (i.e., physical goods). package_dimensions (json) The dimensions of this product for shipping purposes. url (string) A URL of a publicly-accessible webpage for this product. created (integer) Time at which the object was created. Measured in seconds since the Unix epoch updated (integer) Time at which the object was last updated. Measured in seconds since the Unix epoch. date_purged (datetime) Deleted at datetime by which we can determine when the product was deleted. When a product is deleted on stripe this field will be updated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. Configuration Once the Product model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"PRODUCT_MODEL\" : \"app.models.Product\" } Price Prices define the cost per unit, currency, and billing cycle (if applicable) for both recurring and one-time purchases of products. Products are used to track inventory or provisioning, while prices are used to track payment terms. By representing different physical goods or levels of service as products and pricing options as prices, businesses can modify prices without changing their provisioning scheme. To define a price model that incorporates all the fields found in a Stripe price object, developers can inherit from StripeBasePrice provided by the library. Example from stripe_integrations.models import StripeBasePrice class Price ( StripeBasePrice ): product = models . ForeignKey ( Product , on_delete = models . CASCADE , related_name = \"prices\" , ) Fields The StripeBasePrice abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the price in the local database. created_at (datetime) Timestamp when the price object was created in the local database. updated_at (datetime) Timestamp when the price object was last updated in the local database. stripe_id (string) Stripe object id active (boolean) Whether the price can be used for new purchases. currency (string) Three-letter ISO currency code, in lowercase. Must be a supported currency. Choices: \"usd\" nickname (string) A brief description of the price, hidden from customers. recurring (string) The recurring components of a price such as interval and usage_type . tax_code (string) A tax code ID. type (string) One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. custom_unit_amount (json) When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. unit_amount (integer) The unit amount in cents to be charged, represented as a whole integer if possible. Only set if billing_scheme=per_unit . unit_amount_decimal (decimal) The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places. Only set if billing_scheme=per_unit . billing_scheme (string) Describes how to compute the price per period. Either per_unit or tiered . per_unit indicates that the fixed amount (specified in unit_amount or unit_amount_decimal ) will be charged per unit in quantity (for prices with usage_type=licensed ), or per unit of total usage (for prices with usage_type=metered ). tiered indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes. created (int) Time at which the object was created. Measured in seconds since the Unix epoch tax_behavior (string) Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of inclusive , exclusive , or unspecified . Once specified as either inclusive or exclusive , it cannot be changed. tiers (json) Each element represents a pricing tier. This parameter requires billing_scheme to be set to tiered . See also the documentation for billing_scheme . tiers_mode (string) Defines if the tiering price should be graduated or volume based. In volume-based tiering, the maximum quantity within a period determines the per unit price. In graduated tiering, pricing can change as the quantity grows. transform_quantity (json) Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with tiers . created (integer) Time at which the object was created. Measured in seconds since the Unix epoch. lookup_key (string) A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. date_purged (datetime) Deleted at datetime by which we can determine when the price was deleted. When a price is deleted on stripe this field will be updated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. Configuration Once the Price model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"PRICE_MODEL\" : \"app.models.Price\" } Coupon Coupons contain information about discounts in the form of percentage or fixed amount that businesses can apply to a customer's purchase. These coupons can be used for various purposes, such as for subscriptions, invoices, checkout sessions, and quotes. However, they cannot be used with conventional one-off charges or payment intents. To define a coupon model that incorporates all the fields found in a Stripe coupon object, developers can inherit from StripeBaseCoupon provided by the library. Example from stripe_integrations.models import StripeBaseCoupon class Coupon ( StripeBaseCoupon ): pass Fields The StripeBaseCoupon abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the coupon in the local database. created_at (datetime) Timestamp when the coupon object was created in the local database. updated_at (datetime) Timestamp when the coupon object was last updated in the local database. stripe_id (string) Stripe object id name (string) Name of the coupon displayed to customers on for instance invoices or receipts. applies_to (json) Contains information about what this coupon applies to. amount_off (decimal) Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer. currency (string) If amount_off has been set, the three-letter ISO code for the currency of the amount to take off. Choice: usd duration (string) One of forever , once , and repeating . Describes how long a customer who applies this coupon will get the discount. duration_in_months (integer) If duration is repeating , the number of months the coupon applies. Null if coupon duration is forever or once. max_redemptions (integer) Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. percent_off (integer) Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $100 invoice $50 instead. redeem_by (datetime) Date after which the coupon can no longer be redeemed. times_redeemed (integer) Number of times this coupon has been applied to a customer. valid (boolean) Taking account of the above properties, whether this coupon can still be applied to a customer. date_purged (datetime) Deleted at datetime by which we can determine when the coupon was deleted. When a coupon is deleted on stripe this field will be updated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. Configuration Once the Coupon model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"COUPON_MODEL\" : \"app.models.Coupon\" } Event Events are updates from Stripe to a backend system that are triggered whenever changes occur on the Stripe side. To define an event model that includes all the fields found in a Stripe event object, developers can inherit from StripeBaseEvent provided by the library. Example from stripe_integrations.models import StripeBaseEvent class Event ( StripeBaseEvent ): pass Fields The StripeBaseEvent abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the event in the local database. created_at (datetime) Timestamp when the event object was created in the local database. updated_at (datetime) Timestamp when the event object was last updated in the local database. stripe_id (string) Stripe object id kind (string) the label of the event webhook_message (json) request data that the webhook recieve from stripe. validated_message (json) The validated event message is stored in this field valid (boolean) Store whether the event was valid or not. processed (boolean) Status of event, whether the event was proccessed or not. request (json) Information on the API request that instigated the event. pending_webhooks (integer) Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you\u2019ve specified. api_version (string) The Stripe API version used to render data . Note: This property is populated only for events on or after October 31, 2014. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. Configuration Once the Event model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"EVENT_MODEL\" : \"app.models.Event\" } Database migration After implementing the models, create a migration file using the following command: python manage.py makemigrations Once the migration file has been created, apply the migrations to the database using the following command: python manage.py migrate","title":"Models"},{"location":"library/models/#models","text":"A set of base abstract models is included in the library, which encompasses all standard Stripe object fields. This means that developers can inherit these models to incorporate Stripe functionality into their Django projects and add any necessary custom fields.","title":"Models"},{"location":"library/models/#customer","text":"A customer represents an individual or entity that engages with your business. To create a customer model that incorporates all the fields found in a Stripe customer object, developers can inherit from StripeBaseCustomer provided by the library. Example from django.db import models from stripe_integrations.models import StripeBaseCustomer from users.models import User class Customer ( StripeBaseCustomer ): user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = \"stripe_customers\" , )","title":"Customer"},{"location":"library/models/#fields","text":"The StripeBaseCustomer abstract model provides the following fields: Parameter Description id (string) The primary key id (uuid) of the customer in the local database. created_at (datetime) Timestamp when the customer object was created in the local database. updated_at (datetime) Timestamp when the customer object was last updated in the local database. stripe_id (string) Customer's stripe id name (string) The customer\u2019s full name or business name. description (string) An arbitrary string attached to the object. Often useful for displaying to users. email (string) The customer\u2019s email address. address (string) The customer\u2019s address. balance (integer) An integer amount in cents that represents the customer\u2019s current balance, which affect the customer\u2019s future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. currency (string) Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes. Choices: \"usd\" delinquent (boolean) When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice isn\u2019t paid by its due date. default_source (string) ID of the default payment source for the customer. shipping (json) Mailing and shipping address for the customer. Appears on invoices emailed to this customer. tax_exempt (string) Describes the customer\u2019s tax exemption status. One of none , exempt , or reverse . When set to reverse, invoice and receipt PDFs include the text \"Reverse charge\". preferred_locales (array containing string) The customer\u2019s preferred locales (languages), ordered by preference. invoice_prefix (string) The prefix for the customer used to generate unique invoice numbers. Must be 3\u201312 uppercase letters or numbers. invoice_settings (json) Default invoice settings for this customer. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode. date_purged (datetime) Deleted at datetime by which we can determine when the customer was deleted. When a customer is deleted on stripe this field will be updated. is_active (boolean) Determine customer is active or not metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode.","title":"Fields"},{"location":"library/models/#configuration","text":"Once the Customer model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"CUSTOMER_MODEL\" : \"app.models.Customer\" , \"USER_FIELD_NAME\" : \"user\" , }","title":"Configuration"},{"location":"library/models/#card","text":"In the context of payment processing, a card refers to the payment method that a customer will use to make a payment. To define a card model that includes all the fields found in a Stripe card object, developers can inherit from StripeBaseCard provided by the library. Example from django.db import models from stripe_integrations.models import StripeBaseCard class Card ( StripeBaseCard ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"cards\" , )","title":"Card"},{"location":"library/models/#fields_1","text":"The StripeBaseCard abstract model provides the following fields: Parameter Description id (string) The primary key id (uuid) of the card in the local database. created_at (datetime) Timestamp when the card object was created in the local database. updated_at (datetime) Timestamp when the card object was last updated in the local database. stripe_id (string) Customer's stripe id name (string) Cardholder name. address_line_1 (string) Address line 1 (Street address/PO Box/Company name). address_line_1_check (string) If address_line1 was provided, results of the check: pass, fail, unavailable, or unchecked. address_line_2 (string) Address line 2 (Apartment/Suite/Unit/Building). address_city (string) City/District/Suburb/Town/Village. address_state (string) State/County/Province/Region. address_country (string) Billing address country, if provided when creating card. address_zip (string) ZIP or postal code. address_zip_check (string) If address_zip was provided, results of the check: pass , fail , unavailable , or unchecked . brand (string) Card brand. Can be American Express , Diners Club , Discover, JCB , MasterCard , UnionPay , Visa , or Unknown . country (string) Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected. cvc_check (string) If a CVC was provided, results of the check: pass , fail , unavailable , or unchecked . A result of unchecked indicates that CVC was provided but hasn\u2019t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. dynamic_last4 (string) (For tokenized numbers only.) The last four digits of the device account number. tokenization_method (string) If the card number is tokenized, this is the method that was used. Can be android_pay (includes Google Pay), apple_pay , masterpass , visa_checkout , or null. exp_month (integer) Two-digit number representing the card\u2019s expiration month. exp_year (integer) Four-digit number representing the card\u2019s expiration year. funding (string) Card funding type. Can be credit , debit , prepaid , or unknown . last4 (string) The last four digits of the card. fingerprint (string) Uniquely identifies this particular card number. You can use this attribute to check whether two customers who\u2019ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode.","title":"Fields"},{"location":"library/models/#configuration_1","text":"Once the Card model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"CARD_MODEL\" : \"app.models.Card\" , \"CUSTOMER_FIELD_NAME\" : \"customer\" , }","title":"Configuration"},{"location":"library/models/#subscription","text":"Subscriptions enable businesses to charge customers on a recurring basis. To define a subscription model that incorporates all the fields found in a Stripe subscription object, developers can inherit from StripeBaseSubscription provided by the library. Example from django.db import models from stripe_integrations.models import StripeBaseSubscription class Subscription ( StripeBaseSubscription ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"subscriptions\" , help_text = \"The customer associated with this subscription\" , )","title":"Subscription"},{"location":"library/models/#fields_2","text":"The StripeBaseSubscription abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the subscription in the local database. created_at (datetime) Timestamp when the subscription object was created in the local database. updated_at (datetime) Timestamp when the subscription object was last updated in the local database. stripe_id (string) Customer's stripe id items (json) List of subscription items, each with an attached price. application_fee_percent (decimal) A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\u2019s Stripe account. automatic_tax (json) Automatic tax settings for this subscription. billing_cycle_anchor (datetime) Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices. The timestamp is in UTC format. billing_thresholds (json) Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period cancel_at (datetime) A date in the future at which the subscription will automatically get canceled cancel_at_period_end (boolean) If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. canceled_at (datetime) If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end , canceled_at will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state. cancellation_details (json) Details about why this subscription was cancelled collection_method (string) Either charge_automatically, or send_invoice. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as active. current_period_end (datetime) End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. current_period_start (datetime) Start of the current period that the subscription has been invoiced for. days_until_due (integer) Details about why this subscription was cancelled default_payment_method (string) ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over default_source. default_source (string) ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If default_payment_method is also set, default_payment_method will take precedence. default_tax_rates (json) The tax rates that will apply to any subscription item that does not have tax_rates set. Invoices created will have their default_tax_rates populated from the subscription. discount (json) Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. ended_at (datetime) If the subscription has ended, the date the subscription ended. next_pending_invoice_item_invoice (datetime) Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at pending_invoice_item_interval . pause_collection (json) If specified, payment collection for this subscription will be paused. pending_invoice_item_interval (json) Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling Create an invoice for the given subscription at the specified interval. pending_setup_intent (string) You can use this SetupIntent to collect user authentication when creating a subscription without immediate payment or updating a subscription\u2019s payment method, allowing you to optimize for off-session payments. Learn more in the SCA Migration Guide. pending_update (json) If specified, pending updates that will be applied to the subscription once the latest_invoice has been paid. quantity (integer) The quantity applied to this subscription. This value will be null for multi-plan subscriptions start_date (datetime) Date when the subscription was first created. The date might differ from the created date due to backdating. status (string) The status of this subscription. Possible values are incomplete , incomplete_expired , trialing , active , past_due , canceled , or unpaid . trial_end (datetime) If the subscription has a trial, the end of that trial. trial_start (datetime) If the subscription has a trial, the beginning of that trial. trial_settings (json) Settings related to subscription trials. latest_invoice (string) The most recent invoice this subscription has generated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode.","title":"Fields"},{"location":"library/models/#configuration_2","text":"Once the Card model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"SUBSCRIPTION_MODEL\" : \"app.models.Subscription\" , \"CUSTOMER_FIELD_NAME\" : \"customer\" , }","title":"Configuration"},{"location":"library/models/#product","text":"In the context of payment processing, a product refers to a specific good or service offered to customers. For instance, a business might offer both a standard and premium version of a product, with each version being a distinct product. Products can be used with Prices to configure pricing in Payment Links, Checkout, and Subscriptions. To define a product model that incorporates all the fields found in a Stripe product object, developers can inherit from StripeBaseProduct provided by the library. Example from stripe_integrations.models import StripeBaseProduct class Product ( StripeBaseProduct ): pass","title":"Product"},{"location":"library/models/#fields_3","text":"The StripeBaseProduct abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the product in the local database. created_at (datetime) Timestamp when the product object was created in the local database. updated_at (datetime) Timestamp when the product object was last updated in the local database. stripe_id (string) Stripe object id active (boolean) Whether the product is currently available for purchase. description (string) The product\u2019s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. name (string) The product\u2019s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. statement_descriptor (string) Extra information about a product which will appear on your customer\u2019s credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. tax_code (string) A tax code ID. unit_label (string) A label that represents units of this product. When set, this will be included in customers\u2019 receipts, invoices, Checkout, and the customer portal. images (array containing strings) A list of up to 8 URLs of images for this product, meant to be displayable to the customer. shippable (boolean) Whether this product is shipped (i.e., physical goods). package_dimensions (json) The dimensions of this product for shipping purposes. url (string) A URL of a publicly-accessible webpage for this product. created (integer) Time at which the object was created. Measured in seconds since the Unix epoch updated (integer) Time at which the object was last updated. Measured in seconds since the Unix epoch. date_purged (datetime) Deleted at datetime by which we can determine when the product was deleted. When a product is deleted on stripe this field will be updated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode.","title":"Fields"},{"location":"library/models/#configuration_3","text":"Once the Product model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"PRODUCT_MODEL\" : \"app.models.Product\" }","title":"Configuration"},{"location":"library/models/#price","text":"Prices define the cost per unit, currency, and billing cycle (if applicable) for both recurring and one-time purchases of products. Products are used to track inventory or provisioning, while prices are used to track payment terms. By representing different physical goods or levels of service as products and pricing options as prices, businesses can modify prices without changing their provisioning scheme. To define a price model that incorporates all the fields found in a Stripe price object, developers can inherit from StripeBasePrice provided by the library. Example from stripe_integrations.models import StripeBasePrice class Price ( StripeBasePrice ): product = models . ForeignKey ( Product , on_delete = models . CASCADE , related_name = \"prices\" , )","title":"Price"},{"location":"library/models/#fields_4","text":"The StripeBasePrice abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the price in the local database. created_at (datetime) Timestamp when the price object was created in the local database. updated_at (datetime) Timestamp when the price object was last updated in the local database. stripe_id (string) Stripe object id active (boolean) Whether the price can be used for new purchases. currency (string) Three-letter ISO currency code, in lowercase. Must be a supported currency. Choices: \"usd\" nickname (string) A brief description of the price, hidden from customers. recurring (string) The recurring components of a price such as interval and usage_type . tax_code (string) A tax code ID. type (string) One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. custom_unit_amount (json) When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. unit_amount (integer) The unit amount in cents to be charged, represented as a whole integer if possible. Only set if billing_scheme=per_unit . unit_amount_decimal (decimal) The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places. Only set if billing_scheme=per_unit . billing_scheme (string) Describes how to compute the price per period. Either per_unit or tiered . per_unit indicates that the fixed amount (specified in unit_amount or unit_amount_decimal ) will be charged per unit in quantity (for prices with usage_type=licensed ), or per unit of total usage (for prices with usage_type=metered ). tiered indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes. created (int) Time at which the object was created. Measured in seconds since the Unix epoch tax_behavior (string) Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of inclusive , exclusive , or unspecified . Once specified as either inclusive or exclusive , it cannot be changed. tiers (json) Each element represents a pricing tier. This parameter requires billing_scheme to be set to tiered . See also the documentation for billing_scheme . tiers_mode (string) Defines if the tiering price should be graduated or volume based. In volume-based tiering, the maximum quantity within a period determines the per unit price. In graduated tiering, pricing can change as the quantity grows. transform_quantity (json) Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with tiers . created (integer) Time at which the object was created. Measured in seconds since the Unix epoch. lookup_key (string) A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. date_purged (datetime) Deleted at datetime by which we can determine when the price was deleted. When a price is deleted on stripe this field will be updated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode.","title":"Fields"},{"location":"library/models/#configuration_4","text":"Once the Price model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"PRICE_MODEL\" : \"app.models.Price\" }","title":"Configuration"},{"location":"library/models/#coupon","text":"Coupons contain information about discounts in the form of percentage or fixed amount that businesses can apply to a customer's purchase. These coupons can be used for various purposes, such as for subscriptions, invoices, checkout sessions, and quotes. However, they cannot be used with conventional one-off charges or payment intents. To define a coupon model that incorporates all the fields found in a Stripe coupon object, developers can inherit from StripeBaseCoupon provided by the library. Example from stripe_integrations.models import StripeBaseCoupon class Coupon ( StripeBaseCoupon ): pass","title":"Coupon"},{"location":"library/models/#fields_5","text":"The StripeBaseCoupon abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the coupon in the local database. created_at (datetime) Timestamp when the coupon object was created in the local database. updated_at (datetime) Timestamp when the coupon object was last updated in the local database. stripe_id (string) Stripe object id name (string) Name of the coupon displayed to customers on for instance invoices or receipts. applies_to (json) Contains information about what this coupon applies to. amount_off (decimal) Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer. currency (string) If amount_off has been set, the three-letter ISO code for the currency of the amount to take off. Choice: usd duration (string) One of forever , once , and repeating . Describes how long a customer who applies this coupon will get the discount. duration_in_months (integer) If duration is repeating , the number of months the coupon applies. Null if coupon duration is forever or once. max_redemptions (integer) Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. percent_off (integer) Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $100 invoice $50 instead. redeem_by (datetime) Date after which the coupon can no longer be redeemed. times_redeemed (integer) Number of times this coupon has been applied to a customer. valid (boolean) Taking account of the above properties, whether this coupon can still be applied to a customer. date_purged (datetime) Deleted at datetime by which we can determine when the coupon was deleted. When a coupon is deleted on stripe this field will be updated. metadata (json) Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode.","title":"Fields"},{"location":"library/models/#configuration_5","text":"Once the Coupon model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"COUPON_MODEL\" : \"app.models.Coupon\" }","title":"Configuration"},{"location":"library/models/#event","text":"Events are updates from Stripe to a backend system that are triggered whenever changes occur on the Stripe side. To define an event model that includes all the fields found in a Stripe event object, developers can inherit from StripeBaseEvent provided by the library. Example from stripe_integrations.models import StripeBaseEvent class Event ( StripeBaseEvent ): pass","title":"Event"},{"location":"library/models/#fields_6","text":"The StripeBaseEvent abstract model provides the following fields: Field Description id (string) The primary key id (uuid) of the event in the local database. created_at (datetime) Timestamp when the event object was created in the local database. updated_at (datetime) Timestamp when the event object was last updated in the local database. stripe_id (string) Stripe object id kind (string) the label of the event webhook_message (json) request data that the webhook recieve from stripe. validated_message (json) The validated event message is stored in this field valid (boolean) Store whether the event was valid or not. processed (boolean) Status of event, whether the event was proccessed or not. request (json) Information on the API request that instigated the event. pending_webhooks (integer) Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you\u2019ve specified. api_version (string) The Stripe API version used to render data . Note: This property is populated only for events on or after October 31, 2014. livemode (boolean) Has the value true if the object exists in live mode or the value false if the object exists in test mode.","title":"Fields"},{"location":"library/models/#configuration_6","text":"Once the Event model is created. Add the model path in STRIPE_CONFIG . STRIPE_CONFIG = { ... \"EVENT_MODEL\" : \"app.models.Event\" }","title":"Configuration"},{"location":"library/models/#database-migration","text":"After implementing the models, create a migration file using the following command: python manage.py makemigrations Once the migration file has been created, apply the migrations to the database using the following command: python manage.py migrate","title":"Database migration"},{"location":"library/quickstart/","text":"Quickstart Installation Install the package using pip: pip install stripe-integrations Update Installed Apps Add stripe_integrations to your INSTALLED_APPS setting in your Django project's settings file: INSTALLED_APPS = [ ... , 'stripe_integrations' , ] Create Models Create models to manage Stripe data using the abstract base classes provided in stripe_integrations.models . For example: from stripe_integrations.models import StripeBaseCustomer , StripeBaseCard , StripeBaseSubscription , StripeBaseProduct , StripeBasePrice , StripeBaseCoupon , StripeBaseEvent from users.models import User class Customer ( StripeBaseCustomer ): user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = \"stripe_customers\" , ) # Add custom fields as per project requirement class Card ( StripeBaseCard ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"cards\" , ) # Add custom fields as per project requirement class Subscription ( StripeBaseSubscription ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"subscriptions\" , help_text = \"The customer associated with this subscription\" , ) # Add custom fields as per project requirement class Product ( StripeBaseProduct ): # Add custom fields as per project requirement pass class Price ( StripeBaseProduct ): product = models . ForeignKey ( Product , on_delete = models . CASCADE , related_name = \"prices\" , ) # Add custom fields as per project requirement class Coupon ( StripeBaseCoupon ): # Add custom fields as per project requirement pass class Event ( StripeBaseEvent ): # Add custom fields as per project requirement pass Database migration After implementing the models, create a migration file using the following command: python manage.py makemigrations Once the migration file has been created, apply the migrations to the database using the following command: python manage.py migrate Update Settings In your Django project's settings file, update the model paths in STRIPE_CONFIG : STRIPE_CONFIG = { \"API_VERSION\" : \"2022-11-15\" , # Stripe API Version \"API_KEY\" : \"api_key\" , # Stripe Secret Key \"CUSTOMER_MODEL\" : \"project_name.app.models.Customer\" , \"CARD_MODEL\" : \"project_name.app.models.Card\" , \"PRODUCT_MODEL\" : \"project_name.app.models.Product\" , \"PRICE_MODEL\" : \"project_name.app.models.Price\" , \"COUPON_MODEL\" : \"project_name.app.models.Coupon\" , \"EVENT_MODEL\" : \"project_name.app.models.Event\" , \"SUBSCRIPTION_MODEL\" : \"project_name.app.models.Subscription\" , \"CUSTOMER_FIELD_NAME\" : \"customer\" , # Field name used to have foreign key relation with `Customer` model \"USER_FIELD_NAME\" : \"user\" , # Field name that is used by `Customer` model to have foreign relation to `User` model } Sync Stripe Data You can use the following management commands to sync data from Stripe: Sync Customers and their Subscriptions python manage.py sync_stripe_customers Sync Products python manage.py sync_stripe_products Sync Prices python manage.py sync_stripe_prices Sync Coupons python manage.py sync_stripe_coupons Implement APIs You can use the appropriate actions to build payment APIs. Here are some examples: Creating a customer from stripe_integrations.actions.customers import StripeCustomer # Pass user model instance and email as argument customer = StripeCustomer . create ( user , billing_email ) Creating a subscription from stripe_integrations.actions.subscriptions import StripeSubscription # Pass customer model instance and prices(List of stripe price ids) to subscribe as argument subscription = StripeSubscription . create ( customer , prices )","title":"Quickstart"},{"location":"library/quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"library/quickstart/#installation","text":"Install the package using pip: pip install stripe-integrations","title":"Installation"},{"location":"library/quickstart/#update-installed-apps","text":"Add stripe_integrations to your INSTALLED_APPS setting in your Django project's settings file: INSTALLED_APPS = [ ... , 'stripe_integrations' , ]","title":"Update Installed Apps"},{"location":"library/quickstart/#create-models","text":"Create models to manage Stripe data using the abstract base classes provided in stripe_integrations.models . For example: from stripe_integrations.models import StripeBaseCustomer , StripeBaseCard , StripeBaseSubscription , StripeBaseProduct , StripeBasePrice , StripeBaseCoupon , StripeBaseEvent from users.models import User class Customer ( StripeBaseCustomer ): user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = \"stripe_customers\" , ) # Add custom fields as per project requirement class Card ( StripeBaseCard ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"cards\" , ) # Add custom fields as per project requirement class Subscription ( StripeBaseSubscription ): customer = models . ForeignKey ( Customer , on_delete = models . CASCADE , related_name = \"subscriptions\" , help_text = \"The customer associated with this subscription\" , ) # Add custom fields as per project requirement class Product ( StripeBaseProduct ): # Add custom fields as per project requirement pass class Price ( StripeBaseProduct ): product = models . ForeignKey ( Product , on_delete = models . CASCADE , related_name = \"prices\" , ) # Add custom fields as per project requirement class Coupon ( StripeBaseCoupon ): # Add custom fields as per project requirement pass class Event ( StripeBaseEvent ): # Add custom fields as per project requirement pass","title":"Create Models"},{"location":"library/quickstart/#database-migration","text":"After implementing the models, create a migration file using the following command: python manage.py makemigrations Once the migration file has been created, apply the migrations to the database using the following command: python manage.py migrate","title":"Database migration"},{"location":"library/quickstart/#update-settings","text":"In your Django project's settings file, update the model paths in STRIPE_CONFIG : STRIPE_CONFIG = { \"API_VERSION\" : \"2022-11-15\" , # Stripe API Version \"API_KEY\" : \"api_key\" , # Stripe Secret Key \"CUSTOMER_MODEL\" : \"project_name.app.models.Customer\" , \"CARD_MODEL\" : \"project_name.app.models.Card\" , \"PRODUCT_MODEL\" : \"project_name.app.models.Product\" , \"PRICE_MODEL\" : \"project_name.app.models.Price\" , \"COUPON_MODEL\" : \"project_name.app.models.Coupon\" , \"EVENT_MODEL\" : \"project_name.app.models.Event\" , \"SUBSCRIPTION_MODEL\" : \"project_name.app.models.Subscription\" , \"CUSTOMER_FIELD_NAME\" : \"customer\" , # Field name used to have foreign key relation with `Customer` model \"USER_FIELD_NAME\" : \"user\" , # Field name that is used by `Customer` model to have foreign relation to `User` model }","title":"Update Settings"},{"location":"library/quickstart/#sync-stripe-data","text":"You can use the following management commands to sync data from Stripe: Sync Customers and their Subscriptions python manage.py sync_stripe_customers Sync Products python manage.py sync_stripe_products Sync Prices python manage.py sync_stripe_prices Sync Coupons python manage.py sync_stripe_coupons","title":"Sync Stripe Data"},{"location":"library/quickstart/#implement-apis","text":"You can use the appropriate actions to build payment APIs. Here are some examples: Creating a customer from stripe_integrations.actions.customers import StripeCustomer # Pass user model instance and email as argument customer = StripeCustomer . create ( user , billing_email ) Creating a subscription from stripe_integrations.actions.subscriptions import StripeSubscription # Pass customer model instance and prices(List of stripe price ids) to subscribe as argument subscription = StripeSubscription . create ( customer , prices )","title":"Implement APIs"},{"location":"library/webhooks/","text":"Webhook Listen for events on your Stripe account so your integration can automatically trigger reactions. Stripe uses webhooks to notify your application when an event happens in your account. Webhooks are particularly useful for asynchronous events like when a customer\u2019s bank confirms a payment, a customer disputes a charge, a recurring payment succeeds, or when collecting subscription payments. A webhook enables Stripe to push real-time notifications to your app. Stripe uses HTTPS to send these notifications to your app as a JSON payload. You can then use these notifications to execute actions in your backend systems. Webhook events Following are the supported webhook events: Customer: stripe_integrations.webhooks.customers contains all the customer related webhook event Create customer: CustomerCreatedWebhook will process the customer.created webhook event. Update customer: CustomerUpdatedWebhook will process the customer.updated webhook event. Delete customer: CustomerDeletedWebhook will process the customer.deleted webhook event. Card: stripe_integrations.webhooks.sources contains all the card related webhook event Create card: CustomerSourceCreatedWebhook will process the customer.source.created webhook event. Update card: CustomerSourceUpdatedWebhook will process the customer.source.updated webhook event. Delete card: CustomerSourceDeletedWebhook will process the customer.source.deleted webhook event. Subscription: stripe_integrations.webhooks.subscriptions contains all the subscriptions related webhook event Create subscription: CustomerSubscriptionCreatedWebhook will process the customer.subscription.created\" webhook event. Update subscription: CustomerSubscriptionUpdatedWebhook will process the customer.subscription.updated\" webhook event. Subscription trial will end: CustomerSubscriptionTrialWillEndWebhook will process the customer.subscription.trial_will_end\" webhook event. Delete subscription: CustomerSubscriptionDeletedWebhook will process the customer.subscription.deleted\" webhook event. Product: stripe_integrations.webhooks.products contains all the product related webhook event Create product: ProductCreatedWebhook will process the product.created webhook event. Update product: ProductUpdatedWebhook will process the product.updated webhook event. Delete product: ProductDeletedWebhook will process the product.deleted webhook event. Price: stripe_integrations.webhooks.prices contains all the price related webhook event Create price: PriceCreatedWebhook will process the price.created webhook event. Update price: PriceUpdatedWebhook will process the price.updated webhook event. Delete price: PriceDeletedWebhook will process the price.deleted webhook event. Coupon: stripe_integrations.webhooks.coupons contains all the coupon related webhook event Create coupon: CouponCreatedWebhook will process the coupon.created webhook event. Update coupon: CouponUpdatedWebhook will process the coupon.updated webhook event. Delete coupon: CouponDeletedWebhook will process the coupon.deleted webhook event. Configure Webhook Create a view-set that will use StripeWebhook action to process the webhook event. Create webhook viewset from django.http import Http404 from rest_framework import viewsets from rest_framework.permissions import AllowAny from stripe_integrations.actions import StripeWebhook from project.base import response from payment.models import Event class StripeWebhookViewSet ( viewsets . GenericViewSet ): EVENT_MODEL = Event # Check the webhook signatures # Ref: https://stripe.com/docs/webhooks/signatures def create ( self , request , * args , ** kwargs ): try : event_data = request . data StripeWebhook . process_webhook ( event_data ) except Http404 as e : raise e return response . Ok ({ \"success\" : True }) Register webhook view-set to an endpoint from rest_framework.routers import DefaultRouter from payments.apis import StripeWebhookViewSet default_router = DefaultRouter ( trailing_slash = False ) default_router . register ( \"stripe/webhook\" , StripeWebhookViewSet , basename = \"stripe-webhook\" ) Custom Webhook Event To create a custom webhook event for a specific Stripe webhook event, you can inherit BaseWebhook from stripe_integrations.webhooks.base and implement your own webhook event processing logic. As an example, let's say you want to create a webhook event for the product.created event. You can create a new file app/webhook/products.py and define the webhook event class in it. Example # Stripe Integrations Stuff from stripe_integrations.actions import StripeProduct from stripe_integrations.webhooks.base import BaseWebhook class ProductCreateWebhook(BaseWebhook): name = \"product.created\" description = \"Occurs whenever a new product is created.\" def process_webhook(self): StripeProduct.sync(self.event.message[\"data\"][\"object\"]) Once you have implemented the webhook event, you should import the webhook file in the __init__.py file of the app. This is required for the webhook event class to be registered. Example import importlib importlib.import_module(\"app.webhooks.products\") Note If the class is not registered, then the webhook event won't be processed.","title":"Webhook"},{"location":"library/webhooks/#webhook","text":"Listen for events on your Stripe account so your integration can automatically trigger reactions. Stripe uses webhooks to notify your application when an event happens in your account. Webhooks are particularly useful for asynchronous events like when a customer\u2019s bank confirms a payment, a customer disputes a charge, a recurring payment succeeds, or when collecting subscription payments. A webhook enables Stripe to push real-time notifications to your app. Stripe uses HTTPS to send these notifications to your app as a JSON payload. You can then use these notifications to execute actions in your backend systems.","title":"Webhook"},{"location":"library/webhooks/#webhook-events","text":"Following are the supported webhook events: Customer: stripe_integrations.webhooks.customers contains all the customer related webhook event Create customer: CustomerCreatedWebhook will process the customer.created webhook event. Update customer: CustomerUpdatedWebhook will process the customer.updated webhook event. Delete customer: CustomerDeletedWebhook will process the customer.deleted webhook event. Card: stripe_integrations.webhooks.sources contains all the card related webhook event Create card: CustomerSourceCreatedWebhook will process the customer.source.created webhook event. Update card: CustomerSourceUpdatedWebhook will process the customer.source.updated webhook event. Delete card: CustomerSourceDeletedWebhook will process the customer.source.deleted webhook event. Subscription: stripe_integrations.webhooks.subscriptions contains all the subscriptions related webhook event Create subscription: CustomerSubscriptionCreatedWebhook will process the customer.subscription.created\" webhook event. Update subscription: CustomerSubscriptionUpdatedWebhook will process the customer.subscription.updated\" webhook event. Subscription trial will end: CustomerSubscriptionTrialWillEndWebhook will process the customer.subscription.trial_will_end\" webhook event. Delete subscription: CustomerSubscriptionDeletedWebhook will process the customer.subscription.deleted\" webhook event. Product: stripe_integrations.webhooks.products contains all the product related webhook event Create product: ProductCreatedWebhook will process the product.created webhook event. Update product: ProductUpdatedWebhook will process the product.updated webhook event. Delete product: ProductDeletedWebhook will process the product.deleted webhook event. Price: stripe_integrations.webhooks.prices contains all the price related webhook event Create price: PriceCreatedWebhook will process the price.created webhook event. Update price: PriceUpdatedWebhook will process the price.updated webhook event. Delete price: PriceDeletedWebhook will process the price.deleted webhook event. Coupon: stripe_integrations.webhooks.coupons contains all the coupon related webhook event Create coupon: CouponCreatedWebhook will process the coupon.created webhook event. Update coupon: CouponUpdatedWebhook will process the coupon.updated webhook event. Delete coupon: CouponDeletedWebhook will process the coupon.deleted webhook event.","title":"Webhook events"},{"location":"library/webhooks/#configure-webhook","text":"Create a view-set that will use StripeWebhook action to process the webhook event. Create webhook viewset from django.http import Http404 from rest_framework import viewsets from rest_framework.permissions import AllowAny from stripe_integrations.actions import StripeWebhook from project.base import response from payment.models import Event class StripeWebhookViewSet ( viewsets . GenericViewSet ): EVENT_MODEL = Event # Check the webhook signatures # Ref: https://stripe.com/docs/webhooks/signatures def create ( self , request , * args , ** kwargs ): try : event_data = request . data StripeWebhook . process_webhook ( event_data ) except Http404 as e : raise e return response . Ok ({ \"success\" : True }) Register webhook view-set to an endpoint from rest_framework.routers import DefaultRouter from payments.apis import StripeWebhookViewSet default_router = DefaultRouter ( trailing_slash = False ) default_router . register ( \"stripe/webhook\" , StripeWebhookViewSet , basename = \"stripe-webhook\" )","title":"Configure Webhook"},{"location":"library/webhooks/#custom-webhook-event","text":"To create a custom webhook event for a specific Stripe webhook event, you can inherit BaseWebhook from stripe_integrations.webhooks.base and implement your own webhook event processing logic. As an example, let's say you want to create a webhook event for the product.created event. You can create a new file app/webhook/products.py and define the webhook event class in it. Example # Stripe Integrations Stuff from stripe_integrations.actions import StripeProduct from stripe_integrations.webhooks.base import BaseWebhook class ProductCreateWebhook(BaseWebhook): name = \"product.created\" description = \"Occurs whenever a new product is created.\" def process_webhook(self): StripeProduct.sync(self.event.message[\"data\"][\"object\"]) Once you have implemented the webhook event, you should import the webhook file in the __init__.py file of the app. This is required for the webhook event class to be registered. Example import importlib importlib.import_module(\"app.webhooks.products\") Note If the class is not registered, then the webhook event won't be processed.","title":"Custom Webhook Event"},{"location":"library/actions/cards/","text":"Card Actions related to cards in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeCard # Set default card for a customer using the stripe provided card token StripeCard . set_default_card ( customer , card_token ) Set default card for a customer This method creates a new source object, sets it as the new default source for the customer, and deletes the old default source, if there was one. Method from stripe_integrations.actions import StripeCard StripeCard . set_default_card ( customer , card_token ) Returns Local Card object Arguments Argument Description customer Customer object to update the source for card_token The token obtained from Stripe.js Delete card Deletes a card for a customer from both Stripe and the local database. from stripe_integrations.actions import StripeCard StripeCard . delete_card ( customer , source_stripe_id ) Returns None Arguments Argument Description customer The customer object to update the source for source_stripe_id The Stripe ID of the card to delete from Stripe Sync customer from stripe data Updates the local payment source object with the corresponding data retrieved from Stripe. Method from stripe_integrations.actions import StripeCard StripeCard . sync_from_stripe_data ( customer , source ) Returns Local Card object Arguments Argument Description customer The customer object associated with the payment source source The Stripe source data used to update the local object Sync card This method synchronizes a local Card object with the Stripe API. If no source is provided, it will fetch the details from Stripe. Method from stripe_integrations.actions import StripeCard StripeCard . sync ( customer ) Returns Local Card object Arguments Argument Description customer Customer's object source (Optional) Stripe card object that returned from stripe API Default: None Note It will fetch the details from stripe if source is not passed. Retrieve card for customer Retrieves the default payment source (card) for a given customer. Method from stripe_integrations.actions import StripeCard StripeCard . get_for_customer ( customer ) Returns Local Card object Arguments Argument Description customer Customer's object Delete Local Card Deletes the local card object. Method from stripe_integrations.actions import StripeCard StripeCard . delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Card stripe id","title":"Card"},{"location":"library/actions/cards/#card","text":"Actions related to cards in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeCard # Set default card for a customer using the stripe provided card token StripeCard . set_default_card ( customer , card_token )","title":"Card"},{"location":"library/actions/cards/#set-default-card-for-a-customer","text":"This method creates a new source object, sets it as the new default source for the customer, and deletes the old default source, if there was one. Method from stripe_integrations.actions import StripeCard StripeCard . set_default_card ( customer , card_token ) Returns Local Card object Arguments Argument Description customer Customer object to update the source for card_token The token obtained from Stripe.js","title":"Set default card for a customer"},{"location":"library/actions/cards/#delete-card","text":"Deletes a card for a customer from both Stripe and the local database. from stripe_integrations.actions import StripeCard StripeCard . delete_card ( customer , source_stripe_id ) Returns None Arguments Argument Description customer The customer object to update the source for source_stripe_id The Stripe ID of the card to delete from Stripe","title":"Delete card"},{"location":"library/actions/cards/#sync-customer-from-stripe-data","text":"Updates the local payment source object with the corresponding data retrieved from Stripe. Method from stripe_integrations.actions import StripeCard StripeCard . sync_from_stripe_data ( customer , source ) Returns Local Card object Arguments Argument Description customer The customer object associated with the payment source source The Stripe source data used to update the local object","title":"Sync customer from stripe data"},{"location":"library/actions/cards/#sync-card","text":"This method synchronizes a local Card object with the Stripe API. If no source is provided, it will fetch the details from Stripe. Method from stripe_integrations.actions import StripeCard StripeCard . sync ( customer ) Returns Local Card object Arguments Argument Description customer Customer's object source (Optional) Stripe card object that returned from stripe API Default: None Note It will fetch the details from stripe if source is not passed.","title":"Sync card"},{"location":"library/actions/cards/#retrieve-card-for-customer","text":"Retrieves the default payment source (card) for a given customer. Method from stripe_integrations.actions import StripeCard StripeCard . get_for_customer ( customer ) Returns Local Card object Arguments Argument Description customer Customer's object","title":"Retrieve card for customer"},{"location":"library/actions/cards/#delete-local-card","text":"Deletes the local card object. Method from stripe_integrations.actions import StripeCard StripeCard . delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Card stripe id","title":"Delete Local Card"},{"location":"library/actions/coupons/","text":"Coupon Actions related to coupons in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeCoupon StripeCoupon . sync_all () Sync all coupons Synchronizes all coupons from the Stripe API Method from stripe_integrations.actions import StripeCoupon StripeCoupon . sync_all () Returns None Sync coupon Synchronizes coupon from the Stripe API Method from stripe_integrations.actions import StripeCoupon StripeCoupon . sync ( stripe_coupon ) Returns Local coupon object, Boolean value (Whether the coupon object is created) Info It will create or update coupon based on Stripe ID. Arguments Argument Description stripe_coupon Data from Stripe API representing a coupon Retrieve coupon Retrieve coupon in local database. Method from stripe_integrations.actions import StripeCoupon StripeCoupon . get ( stripe_id ) Returns Local Coupon Object Arguments Argument Description stripe_id Coupon's Stripe ID Soft delete coupon It will update the date_purged to mark it as deleted. Method from stripe_integrations.actions import StripeCoupon StripeCoupon . soft_delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Coupon's Stripe ID","title":"Coupon"},{"location":"library/actions/coupons/#coupon","text":"Actions related to coupons in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeCoupon StripeCoupon . sync_all ()","title":"Coupon"},{"location":"library/actions/coupons/#sync-all-coupons","text":"Synchronizes all coupons from the Stripe API Method from stripe_integrations.actions import StripeCoupon StripeCoupon . sync_all () Returns None","title":"Sync all coupons"},{"location":"library/actions/coupons/#sync-coupon","text":"Synchronizes coupon from the Stripe API Method from stripe_integrations.actions import StripeCoupon StripeCoupon . sync ( stripe_coupon ) Returns Local coupon object, Boolean value (Whether the coupon object is created) Info It will create or update coupon based on Stripe ID. Arguments Argument Description stripe_coupon Data from Stripe API representing a coupon","title":"Sync coupon"},{"location":"library/actions/coupons/#retrieve-coupon","text":"Retrieve coupon in local database. Method from stripe_integrations.actions import StripeCoupon StripeCoupon . get ( stripe_id ) Returns Local Coupon Object Arguments Argument Description stripe_id Coupon's Stripe ID","title":"Retrieve coupon"},{"location":"library/actions/coupons/#soft-delete-coupon","text":"It will update the date_purged to mark it as deleted. Method from stripe_integrations.actions import StripeCoupon StripeCoupon . soft_delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Coupon's Stripe ID","title":"Soft delete coupon"},{"location":"library/actions/customers/","text":"Customer Actions related to customers in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeCustomer # Sync customer from Stripe StripeCustomer . sync ( customer ) Create customer This functionality allows the creation of a customer on the Stripe platform. In case a customer with the same credentials already exists, the existing customer information will be returned instead. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . create ( user , billing_email ) Returns Local Customer object Arguments Argument Description user User object billing_email The customer\u2019s email address. Note You can pass all the fields in the Customer model as arguments to the method, except for date_purged , is_active , and livemode . The billing_email field maps to the email field for the Stripe customer. Retrieve Customer This method retrieves the details of a customer object for a specified user. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . get ( user ) Returns Local Customer object Arguments Argument Description user User object Sync Customer from Stripe data This method synchronizes the local Customer object with the details obtained from the Stripe API. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . sync_from_stripe_data ( customer , stripe_customer ) Returns Local Customer object Arguments Argument Description customer Customer's object stripe_customer Stripe customer object that returned from stripe API Sync customer This method synchronizes a local Customer object with details from Stripe. It also synchronizes the customer's default payment source (card) and subscription details. Note Please note that this method has a dependency on the Card and Subscription models. If these models are not implemented, the method will throw an error. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . sync ( customer ) Returns Local Customer object Arguments Argument Description customer Customer's object stripe_customer (Optional) Stripe customer object that returned from stripe API Note It will fetch the details from stripe if stripe_customer is not passed. Link customer to event This method links the customer referred to in a webhook event message to the corresponding local Event object. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . link_customer ( event ) Returns Local Event object Arguments Argument Description event Event object Soft delete customer Updates the date_purged and is_active fields of a customer object to mark it as deleted. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . soft_delete ( customer ) Returns None Arguments Argument Description customer Customer object","title":"Customer"},{"location":"library/actions/customers/#customer","text":"Actions related to customers in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeCustomer # Sync customer from Stripe StripeCustomer . sync ( customer )","title":"Customer"},{"location":"library/actions/customers/#create-customer","text":"This functionality allows the creation of a customer on the Stripe platform. In case a customer with the same credentials already exists, the existing customer information will be returned instead. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . create ( user , billing_email ) Returns Local Customer object Arguments Argument Description user User object billing_email The customer\u2019s email address. Note You can pass all the fields in the Customer model as arguments to the method, except for date_purged , is_active , and livemode . The billing_email field maps to the email field for the Stripe customer.","title":"Create customer"},{"location":"library/actions/customers/#retrieve-customer","text":"This method retrieves the details of a customer object for a specified user. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . get ( user ) Returns Local Customer object Arguments Argument Description user User object","title":"Retrieve Customer"},{"location":"library/actions/customers/#sync-customer-from-stripe-data","text":"This method synchronizes the local Customer object with the details obtained from the Stripe API. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . sync_from_stripe_data ( customer , stripe_customer ) Returns Local Customer object Arguments Argument Description customer Customer's object stripe_customer Stripe customer object that returned from stripe API","title":"Sync Customer from Stripe data"},{"location":"library/actions/customers/#sync-customer","text":"This method synchronizes a local Customer object with details from Stripe. It also synchronizes the customer's default payment source (card) and subscription details. Note Please note that this method has a dependency on the Card and Subscription models. If these models are not implemented, the method will throw an error. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . sync ( customer ) Returns Local Customer object Arguments Argument Description customer Customer's object stripe_customer (Optional) Stripe customer object that returned from stripe API Note It will fetch the details from stripe if stripe_customer is not passed.","title":"Sync customer"},{"location":"library/actions/customers/#link-customer-to-event","text":"This method links the customer referred to in a webhook event message to the corresponding local Event object. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . link_customer ( event ) Returns Local Event object Arguments Argument Description event Event object","title":"Link customer to event"},{"location":"library/actions/customers/#soft-delete-customer","text":"Updates the date_purged and is_active fields of a customer object to mark it as deleted. Method from stripe_integrations.actions import StripeCustomer StripeCustomer . soft_delete ( customer ) Returns None Arguments Argument Description customer Customer object","title":"Soft delete customer"},{"location":"library/actions/events/","text":"Event Actions related to events in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeEvent StripeEvent . add ( stripe_id , kind , livemode , api_version , message ) Note The action is for webhook implementation purpose Add event Add event that comes from stripe webhook. Info When a event is added, based on event type it will initialise the webhook event class and process it. Method from stripe_integrations.actions import StripeEvent StripeEvent . add ( stripe_id , kind , livemode , api_version , message ) Returns None Arguments Argument Description stripe_id event's stripe id kind the label of the event livemode True or False if the webhook was sent from livemode or not message the data of the webhook request_id the id of the request that initiated the webhook pending_webhooks the number of pending webhooks","title":"Event"},{"location":"library/actions/events/#event","text":"Actions related to events in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeEvent StripeEvent . add ( stripe_id , kind , livemode , api_version , message ) Note The action is for webhook implementation purpose","title":"Event"},{"location":"library/actions/events/#add-event","text":"Add event that comes from stripe webhook. Info When a event is added, based on event type it will initialise the webhook event class and process it. Method from stripe_integrations.actions import StripeEvent StripeEvent . add ( stripe_id , kind , livemode , api_version , message ) Returns None Arguments Argument Description stripe_id event's stripe id kind the label of the event livemode True or False if the webhook was sent from livemode or not message the data of the webhook request_id the id of the request that initiated the webhook pending_webhooks the number of pending webhooks","title":"Add event"},{"location":"library/actions/prices/","text":"Price Actions related to prices in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripePrice StripePrice . sync_all () Sync all prices Synchronizes all prices from the Stripe API Method from stripe_integrations.actions import StripePrice StripePrice . sync_all () Returns None Sync price Synchronizes price from the Stripe API Method from stripe_integrations.actions import StripePrice StripePrice . sync ( price ) Returns Local Price object, Boolean value (Whether the price object is created) Info It will create or update price based on stripe id. Also it will map the price to respective product. Arguments Argument Description price Data from Stripe API representing a price Soft delete price Update the date_purged field to mark it as deleted. Method from stripe_integrations.actions import StripePrice StripePrice . soft_delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Price's Stripe ID","title":"Price"},{"location":"library/actions/prices/#price","text":"Actions related to prices in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripePrice StripePrice . sync_all ()","title":"Price"},{"location":"library/actions/prices/#sync-all-prices","text":"Synchronizes all prices from the Stripe API Method from stripe_integrations.actions import StripePrice StripePrice . sync_all () Returns None","title":"Sync all prices"},{"location":"library/actions/prices/#sync-price","text":"Synchronizes price from the Stripe API Method from stripe_integrations.actions import StripePrice StripePrice . sync ( price ) Returns Local Price object, Boolean value (Whether the price object is created) Info It will create or update price based on stripe id. Also it will map the price to respective product. Arguments Argument Description price Data from Stripe API representing a price","title":"Sync price"},{"location":"library/actions/prices/#soft-delete-price","text":"Update the date_purged field to mark it as deleted. Method from stripe_integrations.actions import StripePrice StripePrice . soft_delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Price's Stripe ID","title":"Soft delete price"},{"location":"library/actions/products/","text":"Product Actions related to products in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeProduct StripeProduct . sync_all () Sync all products Synchronizes all products from the Stripe API Method from stripe_integrations.actions import StripeProduct StripeProduct . sync_all () Returns None Sync product Synchronizes product from the Stripe API Method from stripe_integrations.actions import StripeProduct StripeProduct . sync ( product ) Returns Local Product object, Boolean value (Whether the product object is created) Info It will create or update product based on stripe id. Arguments Argument Description product Data from Stripe API representing a product Soft delete product Updates date_purged field to mark it as deleted. Method from stripe_integrations.actions import StripeProduct StripeProduct . soft_delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Product's Stripe ID","title":"Product"},{"location":"library/actions/products/#product","text":"Actions related to products in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeProduct StripeProduct . sync_all ()","title":"Product"},{"location":"library/actions/products/#sync-all-products","text":"Synchronizes all products from the Stripe API Method from stripe_integrations.actions import StripeProduct StripeProduct . sync_all () Returns None","title":"Sync all products"},{"location":"library/actions/products/#sync-product","text":"Synchronizes product from the Stripe API Method from stripe_integrations.actions import StripeProduct StripeProduct . sync ( product ) Returns Local Product object, Boolean value (Whether the product object is created) Info It will create or update product based on stripe id. Arguments Argument Description product Data from Stripe API representing a product","title":"Sync product"},{"location":"library/actions/products/#soft-delete-product","text":"Updates date_purged field to mark it as deleted. Method from stripe_integrations.actions import StripeProduct StripeProduct . soft_delete ( stripe_id ) Returns None Arguments Argument Description stripe_id Product's Stripe ID","title":"Soft delete product"},{"location":"library/actions/subscriptions/","text":"Subscription Actions related to subscriptions in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeSubscription StripeSubscription . sync_from_stripe_data ( customer , stripe_subscription ) Create subscription Creates a subscription for the given customer. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . create ( customer , prices ) Returns Local Subscription object Arguments Argument Description customer Customer object prices List of stripe price id coupon (Optional) Coupon object. Default: None trial_from_plan (Optional) Indicates if a plan\u2019s trial_period_days should be applied to the subscription. Default: True Update subscription Updates a subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . update ( subscription , price ) Returns Local Subscription object Arguments Argument Description subscription Subscription object price Price object to be subscribed to subscription (Optional) Whether to prorate Subscription charges. Default: True Cancel subscription Cancels the subscription. It will cancel the subscription at the end of the current billing period. To cancel the subscription immediately pass cancel_immediately as True in the argument. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . cancel ( subscription ) Returns Local Subscription object Arguments Argument Description subscription Subscription object cancel_immediately (Optional) Whether to cancel the subscription immediately. Default: False Sync customer from stripe data Synchronizes data from the Stripe API for a subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . sync_from_stripe_data ( customer , stripe_subscription ) Returns Local Subscription object Arguments Argument Description customer Customer's object stripe_subscription Stripe subscription object that returned from stripe API Check if customer has active subscription Checks if the given customer has an active subscription Method from stripe_integrations.actions import StripeSubscription StripeSubscription . has_active_subscription ( customer ) Returns Boolean(True or False) Arguments Argument Description customer Customer's object Get current subscription Get current subscription for a given user Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_current_subscription ( user ) Returns Local Subscription object Arguments Argument Description user User's object customer (Optional) Customer's object Default: None Note If customer is not passed it will fetch the customer detail. Retrieve subscription Retrieve latest subscription detail for a given user. Info First it will check for current subscription it current subscription is not available then it will return the latest subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_current_subscription ( user ) Returns Local Subscription object Arguments Argument Description user User's object customer (Optional) Customer's object Default: None Note If cutomer is not passed it will fetch the customer detail. Retrieve stripe subscription object Retrieve stripe subscription object for a given subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_stripe_subscription ( subscription ) Returns Stripe subscription object Arguments Argument Description subscription Subscription object Get upcoming invoice Get upcoming stripe invoice object for a given subscription Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_upcoming_invoice ( subscription ) Returns Stripe invoice object Arguments Argument Description subscription Subscription object Get latest invoice Get latest stripe invoice object for a given subscription Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_latest_invoice ( subscription ) Returns Stripe invoice object Arguments Argument Description subscription Subscription object","title":"Subscription"},{"location":"library/actions/subscriptions/#subscription","text":"Actions related to subscriptions in Stripe that can be used for various purposes. Example from stripe_integrations.actions import StripeSubscription StripeSubscription . sync_from_stripe_data ( customer , stripe_subscription )","title":"Subscription"},{"location":"library/actions/subscriptions/#create-subscription","text":"Creates a subscription for the given customer. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . create ( customer , prices ) Returns Local Subscription object Arguments Argument Description customer Customer object prices List of stripe price id coupon (Optional) Coupon object. Default: None trial_from_plan (Optional) Indicates if a plan\u2019s trial_period_days should be applied to the subscription. Default: True","title":"Create subscription"},{"location":"library/actions/subscriptions/#update-subscription","text":"Updates a subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . update ( subscription , price ) Returns Local Subscription object Arguments Argument Description subscription Subscription object price Price object to be subscribed to subscription (Optional) Whether to prorate Subscription charges. Default: True","title":"Update subscription"},{"location":"library/actions/subscriptions/#cancel-subscription","text":"Cancels the subscription. It will cancel the subscription at the end of the current billing period. To cancel the subscription immediately pass cancel_immediately as True in the argument. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . cancel ( subscription ) Returns Local Subscription object Arguments Argument Description subscription Subscription object cancel_immediately (Optional) Whether to cancel the subscription immediately. Default: False","title":"Cancel subscription"},{"location":"library/actions/subscriptions/#sync-customer-from-stripe-data","text":"Synchronizes data from the Stripe API for a subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . sync_from_stripe_data ( customer , stripe_subscription ) Returns Local Subscription object Arguments Argument Description customer Customer's object stripe_subscription Stripe subscription object that returned from stripe API","title":"Sync customer from stripe data"},{"location":"library/actions/subscriptions/#check-if-customer-has-active-subscription","text":"Checks if the given customer has an active subscription Method from stripe_integrations.actions import StripeSubscription StripeSubscription . has_active_subscription ( customer ) Returns Boolean(True or False) Arguments Argument Description customer Customer's object","title":"Check if customer has active subscription"},{"location":"library/actions/subscriptions/#get-current-subscription","text":"Get current subscription for a given user Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_current_subscription ( user ) Returns Local Subscription object Arguments Argument Description user User's object customer (Optional) Customer's object Default: None Note If customer is not passed it will fetch the customer detail.","title":"Get current subscription"},{"location":"library/actions/subscriptions/#retrieve-subscription","text":"Retrieve latest subscription detail for a given user. Info First it will check for current subscription it current subscription is not available then it will return the latest subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_current_subscription ( user ) Returns Local Subscription object Arguments Argument Description user User's object customer (Optional) Customer's object Default: None Note If cutomer is not passed it will fetch the customer detail.","title":"Retrieve subscription"},{"location":"library/actions/subscriptions/#retrieve-stripe-subscription-object","text":"Retrieve stripe subscription object for a given subscription. Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_stripe_subscription ( subscription ) Returns Stripe subscription object Arguments Argument Description subscription Subscription object","title":"Retrieve stripe subscription object"},{"location":"library/actions/subscriptions/#get-upcoming-invoice","text":"Get upcoming stripe invoice object for a given subscription Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_upcoming_invoice ( subscription ) Returns Stripe invoice object Arguments Argument Description subscription Subscription object","title":"Get upcoming invoice"},{"location":"library/actions/subscriptions/#get-latest-invoice","text":"Get latest stripe invoice object for a given subscription Method from stripe_integrations.actions import StripeSubscription StripeSubscription . get_latest_invoice ( subscription ) Returns Stripe invoice object Arguments Argument Description subscription Subscription object","title":"Get latest invoice"},{"location":"library/actions/webhooks/","text":"Webhook With webhook actions, we can process webhook data based on its event type. Example from stripe_integrations.actions import StripeWebhook StripeWebhook.process_webhook(event_data) Process webhook This method processes the webhook event by adding the event data to the local database. For more details, refer to the event action for more details. Method from stripe_integrations.actions import StripeWebhook StripeWebhook . process_webhook ( event_data ) Returns None","title":"Webhook"},{"location":"library/actions/webhooks/#webhook","text":"With webhook actions, we can process webhook data based on its event type. Example from stripe_integrations.actions import StripeWebhook StripeWebhook.process_webhook(event_data)","title":"Webhook"},{"location":"library/actions/webhooks/#process-webhook","text":"This method processes the webhook event by adding the event data to the local database. For more details, refer to the event action for more details. Method from stripe_integrations.actions import StripeWebhook StripeWebhook . process_webhook ( event_data ) Returns None","title":"Process webhook"}]}